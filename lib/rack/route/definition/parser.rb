#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.6
# from Racc grammer file "".
#

require 'racc/parser.rb'


require 'rack/route/definition/parser_extras'
module Rack
  module Route
    module Definition
      class Parser < Racc::Parser
##### State transition tables begin ###

racc_action_table = [
     3,    12,    14,     6,     3,     7,     8,     6,     3,     7,
     8,     6,     3,     7,     8,     6,    20,     7,     8,    12,
    14,    21,    22,    23,     8 ]

racc_action_check = [
     0,     7,     7,     0,     1,     0,     0,     1,     6,     1,
     1,     6,     2,     6,     6,     2,     8,     2,     2,     3,
     3,     9,    17,    21,     3 ]

racc_action_pointer = [
    -2,     2,    10,    16,   nil,   nil,     6,    -2,    13,    21,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    16,   nil,   nil,
   nil,    23,   nil,   nil ]

racc_action_default = [
   -17,    -2,    -4,   -10,    -5,    -6,   -17,   -17,   -17,   -17,
    -1,    -3,   -15,    -9,   -14,    -7,    -8,   -17,   -12,   -11,
   -16,   -17,   -13,    24 ]

racc_goto_table = [
     9,    10,    11,    15,    16,    13,    17,    18,    19 ]

racc_goto_check = [
     1,     1,     1,     6,     7,     5,     1,     6,     7 ]

racc_goto_pointer = [
   nil,     0,   nil,   nil,   nil,     2,     0,     1 ]

racc_goto_default = [
   nil,   nil,     1,     2,     4,     5,   nil,   nil ]

racc_reduce_table = [
  0, 0, :racc_error,
  2, 10, :_reduce_1,
  1, 10, :_reduce_2,
  2, 10, :_reduce_3,
  1, 10, :_reduce_4,
  1, 10, :_reduce_5,
  1, 10, :_reduce_6,
  2, 11, :_reduce_7,
  2, 11, :_reduce_8,
  2, 11, :_reduce_9,
  1, 11, :_reduce_10,
  2, 13, :_reduce_11,
  2, 13, :_reduce_12,
  3, 12, :_reduce_13,
  1, 16, :_reduce_14,
  1, 15, :_reduce_15,
  2, 14, :_reduce_16 ]

racc_reduce_n = 17

racc_shift_n = 24

racc_token_table = {
  false => 0,
  :error => 1,
  :SLASH => 2,
  :LITERAL => 3,
  :SYMBOL => 4,
  :LPAREN => 5,
  :RPAREN => 6,
  :DOT => 7,
  :STAR => 8 }

racc_nt_base = 9

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "SLASH",
  "LITERAL",
  "SYMBOL",
  "LPAREN",
  "RPAREN",
  "DOT",
  "STAR",
  "$start",
  "path",
  "segment",
  "group",
  "dot",
  "star",
  "literal",
  "symbol" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

def _reduce_1(val, _values, result)
 result = Node.new(:PATH, val.flatten) 
    result
end

def _reduce_2(val, _values, result)
 result = Node.new(:PATH, val.flatten) 
    result
end

def _reduce_3(val, _values, result)
 result = Node.new(:PATH, val.flatten) 
    result
end

def _reduce_4(val, _values, result)
 result = Node.new(:PATH, val) 
    result
end

def _reduce_5(val, _values, result)
 result = Node.new(:PATH, val) 
    result
end

def _reduce_6(val, _values, result)
 result = Node.new(:PATH, val) 
    result
end

def _reduce_7(val, _values, result)
 result = Node.new(:SEGMENT, [val.last]) 
    result
end

def _reduce_8(val, _values, result)
 result = Node.new(:SEGMENT, [val.last]) 
    result
end

def _reduce_9(val, _values, result)
 result = Node.new(:SEGMENT, [val.last]) 
    result
end

def _reduce_10(val, _values, result)
 result = Node.new(:SEGMENT, []) 
    result
end

def _reduce_11(val, _values, result)
 result = Node.new(:DOT, [val.last]) 
    result
end

def _reduce_12(val, _values, result)
 result = Node.new(:DOT, [val.last]) 
    result
end

def _reduce_13(val, _values, result)
 result = Node.new(:GROUP, val[1]) 
    result
end

def _reduce_14(val, _values, result)
 result = Node.new(:SYMBOL, val.first) 
    result
end

def _reduce_15(val, _values, result)
 result = Node.new(:LITERAL, val.first) 
    result
end

def _reduce_16(val, _values, result)
 result = Node.new(:STAR, val.last) 
    result
end

def _reduce_none(val, _values, result)
  val[0]
end

      end   # class Parser
      end   # module Definition
    end   # module Route
  end   # module Rack
